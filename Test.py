from numpy import pi
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit

# Circuit Test 7.3, 15 Qubits
qreg_q_7_3 = QuantumRegister(15, 'q')
creg_c_7_3 = ClassicalRegister(15, 'c')
circuit_7_3 = QuantumCircuit(qreg_q_7_3, creg_c_7_3)

circuit_7_3.reset(qreg_q_7_3[0])
circuit_7_3.reset(qreg_q_7_3[1])
circuit_7_3.reset(qreg_q_7_3[2])
circuit_7_3.reset(qreg_q_7_3[3])
circuit_7_3.reset(qreg_q_7_3[4])
circuit_7_3.reset(qreg_q_7_3[5])
circuit_7_3.reset(qreg_q_7_3[6])
circuit_7_3.reset(qreg_q_7_3[7])
circuit_7_3.reset(qreg_q_7_3[8])
circuit_7_3.reset(qreg_q_7_3[9])
circuit_7_3.reset(qreg_q_7_3[10])
circuit_7_3.reset(qreg_q_7_3[11])
circuit_7_3.reset(qreg_q_7_3[12])
circuit_7_3.reset(qreg_q_7_3[13])
circuit_7_3.reset(qreg_q_7_3[14])
circuit_7_3.h(qreg_q_7_3[0])
circuit_7_3.h(qreg_q_7_3[1])
circuit_7_3.h(qreg_q_7_3[2])
circuit_7_3.h(qreg_q_7_3[3])
circuit_7_3.h(qreg_q_7_3[4])
circuit_7_3.h(qreg_q_7_3[5])
circuit_7_3.h(qreg_q_7_3[6])
circuit_7_3.h(qreg_q_7_3[7])
circuit_7_3.h(qreg_q_7_3[8])
circuit_7_3.h(qreg_q_7_3[9])
circuit_7_3.h(qreg_q_7_3[10])
circuit_7_3.h(qreg_q_7_3[11])
circuit_7_3.h(qreg_q_7_3[12])
circuit_7_3.h(qreg_q_7_3[13])
circuit_7_3.h(qreg_q_7_3[14])
circuit_7_3.rx(pi / 2, qreg_q_7_3[0])
circuit_7_3.u(pi / 2, pi / 2, pi / 2, qreg_q_7_3[1])
circuit_7_3.p(pi / 2, qreg_q_7_3[2])
circuit_7_3.z(qreg_q_7_3[3])
circuit_7_3.y(qreg_q_7_3[4])
circuit_7_3.t(qreg_q_7_3[5])
circuit_7_3.p(pi / 2, qreg_q_7_3[6])
circuit_7_3.y(qreg_q_7_3[7])
circuit_7_3.u(pi / 2, pi / 2, pi / 2, qreg_q_7_3[8])
circuit_7_3.z(qreg_q_7_3[9])
circuit_7_3.sx(qreg_q_7_3[10])
circuit_7_3.z(qreg_q_7_3[11])
circuit_7_3.p(pi / 2, qreg_q_7_3[12])
circuit_7_3.ry(pi / 2, qreg_q_7_3[13])
circuit_7_3.u(pi / 2, pi / 2, pi / 2, qreg_q_7_3[14])
circuit_7_3.s(qreg_q_7_3[0])
circuit_7_3.h(qreg_q_7_3[1])
circuit_7_3.h(qreg_q_7_3[2])
circuit_7_3.h(qreg_q_7_3[3])
circuit_7_3.h(qreg_q_7_3[4])
circuit_7_3.h(qreg_q_7_3[5])
circuit_7_3.h(qreg_q_7_3[6])
circuit_7_3.h(qreg_q_7_3[7])
circuit_7_3.h(qreg_q_7_3[8])
circuit_7_3.h(qreg_q_7_3[9])
circuit_7_3.h(qreg_q_7_3[10])
circuit_7_3.h(qreg_q_7_3[11])
circuit_7_3.h(qreg_q_7_3[12])
circuit_7_3.h(qreg_q_7_3[13])
circuit_7_3.h(qreg_q_7_3[14])
circuit_7_3.h(qreg_q_7_3[0])
circuit_7_3.tdg(qreg_q_7_3[3])
circuit_7_3.sdg(qreg_q_7_3[4])
circuit_7_3.rz(pi / 2, qreg_q_7_3[5])
circuit_7_3.sx(qreg_q_7_3[6])
circuit_7_3.sx(qreg_q_7_3[13])
circuit_7_3.y(qreg_q_7_3[14])
circuit_7_3.h(qreg_q_7_3[5])
circuit_7_3.h(qreg_q_7_3[13])
circuit_7_3.measure(qreg_q_7_3[0], creg_c_7_3[0])
circuit_7_3.measure(qreg_q_7_3[1], creg_c_7_3[1])
circuit_7_3.measure(qreg_q_7_3[2], creg_c_7_3[2])
circuit_7_3.measure(qreg_q_7_3[3], creg_c_7_3[3])
circuit_7_3.measure(qreg_q_7_3[4], creg_c_7_3[4])
circuit_7_3.measure(qreg_q_7_3[5], creg_c_7_3[5])
circuit_7_3.measure(qreg_q_7_3[6], creg_c_7_3[6])
circuit_7_3.measure(qreg_q_7_3[7], creg_c_7_3[7])
circuit_7_3.measure(qreg_q_7_3[8], creg_c_7_3[8])
circuit_7_3.measure(qreg_q_7_3[9], creg_c_7_3[9])
circuit_7_3.measure(qreg_q_7_3[10], creg_c_7_3[10])
circuit_7_3.measure(qreg_q_7_3[11], creg_c_7_3[11])
circuit_7_3.measure(qreg_q_7_3[12], creg_c_7_3[12])
circuit_7_3.measure(qreg_q_7_3[13], creg_c_7_3[13])
circuit_7_3.measure(qreg_q_7_3[14], creg_c_7_3[14])


# https://quantumcomputing.stackexchange.com/questions/13667/qiskit-get-gates-from-circuit-object

# for gate in circuit.data:
    # print('\ngate name:', gate[0].name)
    # print('qubit(s) acted on:', gate[1])
    # print('other paramters (such as angles):', gate[0].params)
    # print(gate)

nr_of_qubits = circuit_7_3.num_qubits
print(nr_of_qubits)

# def quantum_circuit_splitter(circuit, nr_of_qubits_per_part):
